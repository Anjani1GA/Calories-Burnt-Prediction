# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hkUPUuKlZHWXZd79L4-Pg3SC23ZifP1M
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from xgboost import XGBRegressor
from sklearn import metrics

#loading the data from csv file to a pandas data frame
calories=pd.read_csv('/content/calories (1).csv')

calories.head()

excercise_data=pd.read_csv('/content/exercise (1).csv')

excercise_data.head()

#Joining Calories column of calories_data frame to exercise_data
calories_data=pd.concat([excercise_data,calories['Calories']],axis=1)

#checking the number of rows and columns
calories_data.shape

#Getting some information about data
calories_data.info()

#checking for missing values
calories_data.isnull().sum()

"""Data Analysis

"""

#Getting some statistical measures about the data
calories_data.describe()



"""Data Visualization

"""

sns.set()
#CORRELATION
correlation=calories_data.corr()

#constructing a heatmap to understand the correlation
plt.figure(figsize=(10,10))
sns.heatmap(correlation,cbar=True,square=True, fmt='.1f',annot=True, annot_kws={'size':8},cmap='Blues')

#converting the tyext data to numerical values
calories_data.replace({"Gender":{'male':0,'female':1}},inplace=True)

calories_data.head()

#Seperating features and target
X=calories_data.drop(columns=['User_ID','Calories'],axis=1)
Y=calories_data['Calories']

print(X)

#Splitting data into train and test data
X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,random_state=2)

print(X.shape,X_train.shape,X_test.shape)

#model training---->XGBoost Regressor
model=XGBRegressor()

#training the model with X_train
model.fit(X_train,Y_train)

#EVALUATION

#Prediction and test data
test_data_prediction=model.predict(X_test)

print(test_data_prediction)

#Mean absolute Error
mae=metrics.mean_absolute_error(Y_test,test_data_prediction)
print("Mean absolute error=",mae)

